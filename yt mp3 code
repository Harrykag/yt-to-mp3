import os
import logging
from pytube import YouTube
from moviepy.editor import VideoFileClip

# Configurar o logging para mostrar mensagens detalhadas
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def download_video(url, output_dir):
    try:
        yt = YouTube(url)
        logging.info(f"Baixando vídeo: {yt.title}")
        stream = yt.streams.filter(only_audio=True).first()
        output_file = stream.download(output_path=output_dir)
        logging.info(f"Vídeo baixado: {output_file}")
        return output_file
    except Exception as e:
        logging.error(f"Erro ao baixar vídeo: {e}")
        return None

def convert_to_mp3(video_path, output_path):
    try:
        logging.info(f"Convertendo vídeo para MP3: {video_path}")
        video_clip = VideoFileClip(video_path)
        audio_clip = video_clip.audio
        audio_clip.write_audiofile(output_path)
        audio_clip.close()
        video_clip.close()
        logging.info(f"Conversão concluída: {output_path}")
    except Exception as e:
        logging.error(f"Erro ao converter vídeo: {e}")

def main():
    url = input("Digite a URL do vídeo do YouTube: ")
    output_dir = os.path.join(os.getcwd(), "downloads")
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    video_path = download_video(url, output_dir)
    if video_path and os.path.exists(video_path):
        output_path = os.path.splitext(video_path)[0] + '.mp3'
        convert_to_mp3(video_path, output_path)
        if os.path.exists(output_path):
            os.remove(video_path)  # Remove o arquivo de vídeo após a conversão
            logging.info(f"Download completo! O arquivo MP3 foi salvo em: {output_path}")
        else:
            logging.error("Falha ao criar o arquivo MP3.")
    else:
        logging.error("Falha ao baixar o vídeo.")

if __name__ == "__main__":
    main()
